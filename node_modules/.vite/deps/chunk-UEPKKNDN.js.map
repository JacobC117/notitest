{
  "version": 3,
  "sources": ["../../@nivo/legends/src/svg/symbols/SymbolCircle.tsx", "../../@nivo/legends/src/svg/symbols/SymbolDiamond.tsx", "../../@nivo/legends/src/svg/symbols/SymbolSquare.tsx", "../../@nivo/legends/src/svg/symbols/SymbolTriangle.tsx", "../../@nivo/legends/src/defaults.ts", "../../@nivo/legends/src/compute.ts", "../../@nivo/legends/src/svg/ContinuousColorsLegendSvg.tsx", "../../@nivo/legends/src/svg/AnchoredContinuousColorsLegendSvg.tsx", "../../@nivo/legends/src/svg/LegendSvgItem.tsx", "../../@nivo/legends/src/svg/LegendSvg.tsx", "../../@nivo/legends/src/svg/BoxLegendSvg.tsx", "../../@nivo/legends/src/canvas.ts", "../../@nivo/legends/src/hooks.ts"],
  "sourcesContent": ["import { SymbolProps } from './types'\n\nexport const SymbolCircle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <circle\n            r={size / 2}\n            cx={x + size / 2}\n            cy={y + size / 2}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n", "import { SymbolProps } from './types'\n\nexport const SymbolDiamond = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                    M${size / 2} 0\n                    L${size * 0.8} ${size / 2}\n                    L${size / 2} ${size}\n                    L${size * 0.2} ${size / 2}\n                    L${size / 2} 0\n                `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n", "import { SymbolProps } from './types'\n\nexport const SymbolSquare = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <rect\n            x={x}\n            y={y}\n            fill={fill}\n            opacity={opacity}\n            strokeWidth={borderWidth}\n            stroke={borderColor}\n            width={size}\n            height={size}\n            style={{\n                pointerEvents: 'none',\n            }}\n        />\n    )\n}\n", "import { SymbolProps } from './types'\n\nexport const SymbolTriangle = ({\n    x,\n    y,\n    size,\n    fill,\n    opacity = 1,\n    borderWidth = 0,\n    borderColor = 'transparent',\n}: SymbolProps) => {\n    return (\n        <g transform={`translate(${x},${y})`}>\n            <path\n                d={`\n                M${size / 2} 0\n                L${size} ${size}\n                L0 ${size}\n                L${size / 2} 0\n            `}\n                fill={fill}\n                opacity={opacity}\n                strokeWidth={borderWidth}\n                stroke={borderColor}\n                style={{\n                    pointerEvents: 'none',\n                }}\n            />\n        </g>\n    )\n}\n", "import { ContinuousColorsLegendProps } from './types'\n\nexport const continuousColorsLegendDefaults: {\n    length: NonNullable<ContinuousColorsLegendProps['length']>\n    thickness: NonNullable<ContinuousColorsLegendProps['thickness']>\n    direction: NonNullable<ContinuousColorsLegendProps['direction']>\n    tickPosition: NonNullable<ContinuousColorsLegendProps['tickPosition']>\n    tickSize: NonNullable<ContinuousColorsLegendProps['tickSize']>\n    tickSpacing: NonNullable<ContinuousColorsLegendProps['tickSpacing']>\n    tickOverlap: NonNullable<ContinuousColorsLegendProps['tickOverlap']>\n    tickFormat: NonNullable<ContinuousColorsLegendProps['tickFormat']>\n    titleAlign: NonNullable<ContinuousColorsLegendProps['titleAlign']>\n    titleOffset: NonNullable<ContinuousColorsLegendProps['titleOffset']>\n} = {\n    length: 200,\n    thickness: 16,\n    direction: 'row',\n    tickPosition: 'after',\n    tickSize: 4,\n    tickSpacing: 3,\n    tickOverlap: false,\n    tickFormat: (value: number) => `${value}`,\n    titleAlign: 'start',\n    titleOffset: 4,\n}\n", "import { scaleLinear } from 'd3-scale'\nimport { getValueFormatter } from '@nivo/core'\nimport { computeContinuousColorScaleColorStops } from '@nivo/colors'\nimport {\n    BoxLegendSvgProps,\n    ContinuousColorsLegendProps,\n    LegendAnchor,\n    LegendItemDirection,\n} from './types'\nimport { continuousColorsLegendDefaults } from './defaults'\n\nconst isObject = <T>(item: unknown): item is T =>\n    typeof item === 'object' && !Array.isArray(item) && item !== null\n\nconst zeroPadding = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n}\n\nexport const computeDimensions = ({\n    direction,\n    itemsSpacing,\n    padding: _padding,\n    itemCount,\n    itemWidth,\n    itemHeight,\n}: Pick<BoxLegendSvgProps, 'direction' | 'padding'> &\n    Record<'itemsSpacing' | 'itemCount' | 'itemWidth' | 'itemHeight', number>) => {\n    if (typeof _padding !== 'number' && !isObject(_padding)) {\n        throw new Error('Invalid property padding, must be one of: number, object')\n    }\n\n    const padding =\n        typeof _padding === 'number'\n            ? {\n                  top: _padding,\n                  right: _padding,\n                  bottom: _padding,\n                  left: _padding,\n              }\n            : {\n                  ...zeroPadding,\n                  ..._padding,\n              }\n\n    const horizontalPadding = padding.left + padding.right\n    const verticalPadding = padding.top + padding.bottom\n    let width = itemWidth + horizontalPadding\n    let height = itemHeight + verticalPadding\n    const spacing = (itemCount - 1) * itemsSpacing\n    if (direction === 'row') {\n        width = itemWidth * itemCount + spacing + horizontalPadding\n    } else if (direction === 'column') {\n        height = itemHeight * itemCount + spacing + verticalPadding\n    }\n\n    return { width, height, padding }\n}\n\nexport const computePositionFromAnchor = ({\n    anchor,\n    translateX,\n    translateY,\n    containerWidth,\n    containerHeight,\n    width,\n    height,\n}: { anchor: LegendAnchor } & Record<\n    'translateX' | 'translateY' | 'containerWidth' | 'containerHeight' | 'width' | 'height',\n    number\n>) => {\n    let x = translateX\n    let y = translateY\n\n    switch (anchor) {\n        case 'top':\n            x += (containerWidth - width) / 2\n            break\n\n        case 'top-right':\n            x += containerWidth - width\n            break\n\n        case 'right':\n            x += containerWidth - width\n            y += (containerHeight - height) / 2\n            break\n\n        case 'bottom-right':\n            x += containerWidth - width\n            y += containerHeight - height\n            break\n\n        case 'bottom':\n            x += (containerWidth - width) / 2\n            y += containerHeight - height\n            break\n\n        case 'bottom-left':\n            y += containerHeight - height\n            break\n\n        case 'left':\n            y += (containerHeight - height) / 2\n            break\n\n        case 'center':\n            x += (containerWidth - width) / 2\n            y += (containerHeight - height) / 2\n            break\n    }\n\n    return { x, y }\n}\n\nexport const computeItemLayout = ({\n    direction,\n    justify,\n    symbolSize,\n    symbolSpacing,\n    width,\n    height,\n}: {\n    direction: LegendItemDirection\n    justify: boolean\n} & Record<'symbolSize' | 'symbolSpacing' | 'width' | 'height', number>) => {\n    let symbolX\n    let symbolY\n\n    let labelX\n    let labelY\n    let labelAnchor: 'start' | 'middle' | 'end'\n    let labelAlignment: 'alphabetic' | 'central' | 'text-before-edge'\n\n    switch (direction) {\n        case 'left-to-right':\n            symbolX = 0\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify) {\n                labelX = width\n                labelAnchor = 'end'\n            } else {\n                labelX = symbolSize + symbolSpacing\n                labelAnchor = 'start'\n            }\n            break\n\n        case 'right-to-left':\n            symbolX = width - symbolSize\n            symbolY = (height - symbolSize) / 2\n\n            labelY = height / 2\n            labelAlignment = 'central'\n            if (justify) {\n                labelX = 0\n                labelAnchor = 'start'\n            } else {\n                labelX = width - symbolSize - symbolSpacing\n                labelAnchor = 'end'\n            }\n            break\n\n        case 'top-to-bottom':\n            symbolX = (width - symbolSize) / 2\n            symbolY = 0\n\n            labelX = width / 2\n\n            labelAnchor = 'middle'\n            if (justify) {\n                labelY = height\n                labelAlignment = 'alphabetic'\n            } else {\n                labelY = symbolSize + symbolSpacing\n                labelAlignment = 'text-before-edge'\n            }\n            break\n\n        case 'bottom-to-top':\n            symbolX = (width - symbolSize) / 2\n            symbolY = height - symbolSize\n\n            labelX = width / 2\n            labelAnchor = 'middle'\n            if (justify) {\n                labelY = 0\n                labelAlignment = 'text-before-edge'\n            } else {\n                labelY = height - symbolSize - symbolSpacing\n                labelAlignment = 'alphabetic'\n            }\n            break\n    }\n\n    return {\n        symbolX,\n        symbolY,\n        labelX,\n        labelY,\n        labelAnchor,\n        labelAlignment,\n    }\n}\n\nexport const computeContinuousColorsLegend = ({\n    scale,\n    ticks,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    tickPosition = continuousColorsLegendDefaults.tickPosition,\n    tickSize = continuousColorsLegendDefaults.tickSize,\n    tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n    tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n    tickFormat = continuousColorsLegendDefaults.tickFormat,\n    title,\n    titleAlign = continuousColorsLegendDefaults.titleAlign,\n    titleOffset = continuousColorsLegendDefaults.titleOffset,\n}: ContinuousColorsLegendProps) => {\n    // left to right for `row`, bottom to top for `column`\n    const domain = direction === 'column' ? [...scale.domain()].reverse() : scale.domain()\n\n    const positionScale = scaleLinear().domain(domain)\n    if (domain.length === 2) {\n        // sequential, quantize\n        positionScale.range([0, length])\n    } else if (domain.length === 3) {\n        // diverging\n        positionScale.range([0, length / 2, length])\n    }\n\n    let values: number[]\n    if ('thresholds' in scale) {\n        // quantize\n        values = [domain[0], ...scale.thresholds(), domain[1]]\n    } else {\n        // sequential, diverging\n        values = Array.isArray(ticks) ? ticks : (scale as any).ticks(ticks)\n    }\n\n    const colorStops = computeContinuousColorScaleColorStops(scale, 32)\n\n    const formatValue = getValueFormatter(tickFormat)\n\n    const computedTicks: {\n        x1: number\n        y1: number\n        x2: number\n        y2: number\n        text: string\n        textX: number\n        textY: number\n        textHorizontalAlign: 'start' | 'middle' | 'end'\n        textVerticalAlign: 'alphabetic' | 'central' | 'hanging'\n    }[] = []\n\n    let width: number\n    let height: number\n\n    const gradientX1 = 0\n    let gradientY1 = 0\n    let gradientX2 = 0\n    const gradientY2 = 0\n\n    let titleX: number\n    let titleY: number\n    let titleRotation: number\n    let titleVerticalAlign: 'alphabetic' | 'hanging'\n\n    if (direction === 'row') {\n        width = length\n        height = thickness\n\n        gradientX2 = 1\n\n        let y1: number\n        let y2: number\n\n        let textY: number\n        const textHorizontalAlign = 'middle'\n        let textVerticalAlign: 'alphabetic' | 'hanging'\n\n        titleRotation = 0\n        if (titleAlign === 'start') {\n            titleX = 0\n        } else if (titleAlign === 'middle') {\n            titleX = length / 2\n        } else {\n            titleX = length\n        }\n\n        if (tickPosition === 'before') {\n            y1 = -tickSize\n            y2 = tickOverlap ? thickness : 0\n\n            textY = -tickSize - tickSpacing\n            textVerticalAlign = 'alphabetic'\n\n            titleY = thickness + titleOffset\n            titleVerticalAlign = 'hanging'\n        } else {\n            y1 = tickOverlap ? 0 : thickness\n            y2 = thickness + tickSize\n\n            textY = y2 + tickSpacing\n            textVerticalAlign = 'hanging'\n\n            titleY = -titleOffset\n            titleVerticalAlign = 'alphabetic'\n        }\n\n        values.forEach(value => {\n            const x = positionScale(value)\n\n            computedTicks.push({\n                x1: x,\n                y1,\n                x2: x,\n                y2,\n                text: formatValue(value),\n                textX: x,\n                textY,\n                textHorizontalAlign,\n                textVerticalAlign,\n            })\n        })\n    } else {\n        width = thickness\n        height = length\n\n        gradientY1 = 1\n\n        let x1: number\n        let x2: number\n\n        let textX: number\n        let textHorizontalAlign: 'start' | 'end'\n        const textVerticalAlign = 'central'\n\n        titleRotation = -90\n        if (titleAlign === 'start') {\n            titleY = length\n        } else if (titleAlign === 'middle') {\n            titleY = length / 2\n        } else {\n            titleY = 0\n        }\n\n        if (tickPosition === 'before') {\n            x1 = -tickSize\n            x2 = tickOverlap ? thickness : 0\n\n            textX = x1 - tickSpacing\n            textHorizontalAlign = 'end'\n\n            titleX = thickness + titleOffset\n            titleVerticalAlign = 'hanging'\n        } else {\n            x1 = tickOverlap ? 0 : thickness\n            x2 = thickness + tickSize\n\n            textX = x2 + tickSpacing\n            textHorizontalAlign = 'start'\n\n            titleX = -titleOffset\n            titleVerticalAlign = 'alphabetic'\n        }\n\n        values.forEach(value => {\n            const y = positionScale(value)\n\n            computedTicks.push({\n                x1,\n                y1: y,\n                x2,\n                y2: y,\n                text: formatValue(value),\n                textX,\n                textY: y,\n                textHorizontalAlign,\n                textVerticalAlign,\n            })\n        })\n    }\n\n    return {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        colorStops,\n        ticks: computedTicks,\n        titleText: title,\n        titleX,\n        titleY,\n        titleRotation,\n        titleHorizontalAlign: titleAlign,\n        titleVerticalAlign,\n    }\n}\n", "import { Fragment } from 'react'\nimport { useTheme } from '@nivo/core'\nimport { computeContinuousColorsLegend } from '../compute'\nimport { ContinuousColorsLegendProps } from '../types'\nimport { continuousColorsLegendDefaults } from '../defaults'\n\nexport const ContinuousColorsLegendSvg = ({\n    scale,\n    ticks,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    tickPosition = continuousColorsLegendDefaults.tickPosition,\n    tickSize = continuousColorsLegendDefaults.tickSize,\n    tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n    tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n    tickFormat = continuousColorsLegendDefaults.tickFormat,\n    title,\n    titleAlign = continuousColorsLegendDefaults.titleAlign,\n    titleOffset = continuousColorsLegendDefaults.titleOffset,\n}: ContinuousColorsLegendProps) => {\n    const {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        ticks: computedTicks,\n        colorStops,\n        titleText,\n        titleX,\n        titleY,\n        titleRotation,\n        titleVerticalAlign,\n        titleHorizontalAlign,\n    } = computeContinuousColorsLegend({\n        scale,\n        ticks,\n        length,\n        thickness,\n        direction,\n        tickPosition,\n        tickSize,\n        tickSpacing,\n        tickOverlap,\n        tickFormat,\n        title,\n        titleAlign,\n        titleOffset,\n    })\n\n    const theme = useTheme()\n\n    const id = `ContinuousColorsLegendSvgGradient.${direction}.${colorStops\n        .map(stop => stop.offset)\n        .join('_')}`\n\n    return (\n        <g>\n            <defs>\n                <linearGradient\n                    id={id}\n                    x1={gradientX1}\n                    y1={gradientY1}\n                    x2={gradientX2}\n                    y2={gradientY2}\n                >\n                    {colorStops.map(colorStop => (\n                        <stop {...colorStop} />\n                    ))}\n                </linearGradient>\n            </defs>\n            {titleText && (\n                <text\n                    transform={`translate(${titleX}, ${titleY}) rotate(${titleRotation})`}\n                    textAnchor={titleHorizontalAlign}\n                    dominantBaseline={titleVerticalAlign}\n                    style={theme.legends.title.text}\n                >\n                    {titleText}\n                </text>\n            )}\n            <rect width={width} height={height} fill={`url(#${id}`} />\n            {computedTicks.map((tick, index) => (\n                <Fragment key={index}>\n                    <line\n                        x1={tick.x1}\n                        y1={tick.y1}\n                        x2={tick.x2}\n                        y2={tick.y2}\n                        style={theme.legends.ticks.line}\n                    />\n                    <text\n                        x={tick.textX}\n                        y={tick.textY}\n                        textAnchor={tick.textHorizontalAlign}\n                        dominantBaseline={tick.textVerticalAlign}\n                        style={theme.legends.ticks.text}\n                    >\n                        {tick.text}\n                    </text>\n                </Fragment>\n            ))}\n        </g>\n    )\n}\n", "import { AnchoredContinuousColorsLegendProps } from '../types'\nimport { computePositionFromAnchor } from '../compute'\nimport { continuousColorsLegendDefaults } from '../defaults'\nimport { ContinuousColorsLegendSvg } from './ContinuousColorsLegendSvg'\n\nexport const AnchoredContinuousColorsLegendSvg = ({\n    containerWidth,\n    containerHeight,\n    anchor,\n    translateX = 0,\n    translateY = 0,\n    length = continuousColorsLegendDefaults.length,\n    thickness = continuousColorsLegendDefaults.thickness,\n    direction = continuousColorsLegendDefaults.direction,\n    ...legendProps\n}: AnchoredContinuousColorsLegendProps) => {\n    let width: number\n    let height: number\n    if (direction === 'row') {\n        width = length\n        height = thickness\n    } else {\n        width = thickness\n        height = length\n    }\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <g transform={`translate(${x}, ${y})`}>\n            <ContinuousColorsLegendSvg\n                length={length}\n                thickness={thickness}\n                direction={direction}\n                {...legendProps}\n            />\n        </g>\n    )\n}\n", "import { useState, useCallback } from 'react'\nimport * as React from 'react'\nimport { useTheme, sanitizeSvgTextStyle } from '@nivo/core'\nimport { LegendSvgItemProps } from '../types'\nimport { computeItemLayout } from '../compute'\nimport { SymbolCircle, SymbolDiamond, SymbolSquare, SymbolTriangle } from './symbols'\n\ntype Style = Partial<{\n    itemBackground: string\n    itemOpacity: number\n    itemTextColor: string\n    symbolBorderColor: string\n    symbolBorderWidth: number\n    symbolSize: number\n}>\n\nconst symbolByShape = {\n    circle: SymbolCircle,\n    diamond: SymbolDiamond,\n    square: SymbolSquare,\n    triangle: SymbolTriangle,\n}\n\nexport const LegendSvgItem = ({\n    x,\n    y,\n    width,\n    height,\n    data,\n    direction = 'left-to-right',\n    justify = false,\n    textColor,\n    background = 'transparent',\n    opacity = 1,\n\n    symbolShape = 'square',\n    symbolSize = 16,\n    symbolSpacing = 8,\n    symbolBorderWidth = 0,\n    symbolBorderColor = 'transparent',\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: LegendSvgItemProps) => {\n    const [style, setStyle] = useState<Style>({})\n    const theme = useTheme()\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on === 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseEnter?.(data, event)\n        },\n        [onMouseEnter, data, effects]\n    )\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            if (effects) {\n                const applyEffects = effects.filter(({ on }) => on !== 'hover')\n                const style = applyEffects.reduce(\n                    (acc, effect) => ({\n                        ...acc,\n                        ...effect.style,\n                    }),\n                    {}\n                )\n                setStyle(style)\n            }\n\n            onMouseLeave?.(data, event)\n        },\n        [onMouseLeave, data, effects]\n    )\n\n    const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout({\n        direction,\n        justify,\n        symbolSize: style.symbolSize ?? symbolSize,\n        symbolSpacing,\n        width,\n        height,\n    })\n\n    const isInteractive = [onClick, onMouseEnter, onMouseLeave, toggleSerie].some(\n        handler => handler !== undefined\n    )\n\n    const SymbolShape = typeof symbolShape === 'function' ? symbolShape : symbolByShape[symbolShape]\n\n    return (\n        <g\n            transform={`translate(${x},${y})`}\n            style={{\n                opacity: style.itemOpacity ?? opacity,\n            }}\n        >\n            <rect\n                width={width}\n                height={height}\n                fill={style.itemBackground ?? background}\n                style={{\n                    cursor: isInteractive ? 'pointer' : 'auto',\n                }}\n                onClick={event => {\n                    onClick?.(data, event)\n                    toggleSerie?.(data.id)\n                }}\n                onMouseEnter={handleMouseEnter}\n                onMouseLeave={handleMouseLeave}\n            />\n            {React.createElement(SymbolShape, {\n                id: data.id,\n                x: symbolX,\n                y: symbolY,\n                size: style.symbolSize ?? symbolSize,\n                fill: data.fill ?? data.color ?? 'black',\n                borderWidth: style.symbolBorderWidth ?? symbolBorderWidth,\n                borderColor: style.symbolBorderColor ?? symbolBorderColor,\n                ...(data.hidden ? theme.legends.hidden.symbol : undefined),\n            })}\n            <text\n                textAnchor={labelAnchor}\n                style={{\n                    ...sanitizeSvgTextStyle(theme.legends.text),\n                    fill: style.itemTextColor ?? textColor ?? theme.legends.text.fill ?? 'black',\n                    dominantBaseline: labelAlignment,\n                    pointerEvents: 'none',\n                    userSelect: 'none',\n                    ...(data.hidden ? theme.legends.hidden.text : undefined),\n                }}\n                x={labelX}\n                y={labelY}\n            >\n                {data.label}\n            </text>\n        </g>\n    )\n}\n", "import { LegendSvgItem } from './LegendSvgItem'\nimport { LegendSvgProps } from '../types'\nimport { computeDimensions } from '../compute'\n\nexport const LegendSvg = ({\n    data,\n\n    x,\n    y,\n    direction,\n    padding: _padding = 0,\n    justify,\n    effects,\n\n    itemWidth,\n    itemHeight,\n    itemDirection = 'left-to-right',\n    itemsSpacing = 0,\n    itemTextColor,\n    itemBackground = 'transparent',\n    itemOpacity = 1,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n}: LegendSvgProps) => {\n    const { padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    return (\n        <g transform={`translate(${x},${y})`}>\n            {data.map((data, i) => (\n                <LegendSvgItem\n                    key={i}\n                    data={data}\n                    x={i * xStep + padding.left}\n                    y={i * yStep + padding.top}\n                    width={itemWidth}\n                    height={itemHeight}\n                    direction={itemDirection}\n                    justify={justify}\n                    effects={effects}\n                    textColor={itemTextColor}\n                    background={itemBackground}\n                    opacity={itemOpacity}\n                    symbolShape={symbolShape}\n                    symbolSize={symbolSize}\n                    symbolSpacing={symbolSpacing}\n                    symbolBorderWidth={symbolBorderWidth}\n                    symbolBorderColor={symbolBorderColor}\n                    onClick={onClick}\n                    onMouseEnter={onMouseEnter}\n                    onMouseLeave={onMouseLeave}\n                    toggleSerie={toggleSerie}\n                />\n            ))}\n        </g>\n    )\n}\n", "import { LegendSvg } from './LegendSvg'\nimport { BoxLegendSvgProps } from '../types'\nimport { computeDimensions, computePositionFromAnchor } from '../compute'\n\nexport const BoxLegendSvg = ({\n    data,\n\n    containerWidth,\n    containerHeight,\n    translateX = 0,\n    translateY = 0,\n    anchor,\n    direction,\n    padding = 0,\n    justify,\n\n    itemsSpacing = 0,\n    itemWidth,\n    itemHeight,\n    itemDirection,\n    itemTextColor,\n    itemBackground,\n    itemOpacity,\n\n    symbolShape,\n    symbolSize,\n    symbolSpacing,\n    symbolBorderWidth,\n    symbolBorderColor,\n\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    toggleSerie,\n\n    effects,\n}: BoxLegendSvgProps) => {\n    const { width, height } = computeDimensions({\n        itemCount: data.length,\n        itemsSpacing,\n        itemWidth,\n        itemHeight,\n        direction,\n        padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    return (\n        <LegendSvg\n            data={data}\n            x={x}\n            y={y}\n            direction={direction}\n            padding={padding}\n            justify={justify}\n            effects={effects}\n            itemsSpacing={itemsSpacing}\n            itemWidth={itemWidth}\n            itemHeight={itemHeight}\n            itemDirection={itemDirection}\n            itemTextColor={itemTextColor}\n            itemBackground={itemBackground}\n            itemOpacity={itemOpacity}\n            symbolShape={symbolShape}\n            symbolSize={symbolSize}\n            symbolSpacing={symbolSpacing}\n            symbolBorderWidth={symbolBorderWidth}\n            symbolBorderColor={symbolBorderColor}\n            onClick={onClick}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n            toggleSerie={typeof toggleSerie === 'boolean' ? undefined : toggleSerie}\n        />\n    )\n}\n", "import { CompleteTheme, degreesToRadians } from '@nivo/core'\nimport {\n    computeDimensions,\n    computePositionFromAnchor,\n    computeItemLayout,\n    computeContinuousColorsLegend,\n} from './compute'\nimport { AnchoredContinuousColorsLegendProps, LegendCanvasProps } from './types'\nimport { continuousColorsLegendDefaults } from './defaults'\n\nconst textAlignMapping = {\n    start: 'left',\n    middle: 'center',\n    end: 'right',\n} as const\n\nexport const renderLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        data,\n\n        containerWidth,\n        containerHeight,\n        translateX = 0,\n        translateY = 0,\n        anchor,\n        direction,\n        padding: _padding = 0,\n        justify = false,\n\n        // items\n        itemsSpacing = 0,\n        itemWidth,\n        itemHeight,\n        itemDirection = 'left-to-right',\n        itemTextColor,\n\n        // symbol\n        symbolSize = 16,\n        symbolSpacing = 8,\n        // @todo add support for shapes\n        // symbolShape = LegendSvgItem.defaultProps.symbolShape,\n\n        theme,\n    }: LegendCanvasProps\n) => {\n    const { width, height, padding } = computeDimensions({\n        itemCount: data.length,\n        itemWidth,\n        itemHeight,\n        itemsSpacing,\n        direction,\n        padding: _padding,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const xStep = direction === 'row' ? itemWidth + itemsSpacing : 0\n    const yStep = direction === 'column' ? itemHeight + itemsSpacing : 0\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.font = `${theme.legends.text.fontSize}px ${theme.legends.text.fontFamily || 'sans-serif'}`\n\n    data.forEach((d, i) => {\n        const itemX = i * xStep + padding.left\n        const itemY = i * yStep + padding.top\n\n        const { symbolX, symbolY, labelX, labelY, labelAnchor, labelAlignment } = computeItemLayout(\n            {\n                direction: itemDirection,\n                justify,\n                symbolSize,\n                symbolSpacing,\n                width: itemWidth,\n                height: itemHeight,\n            }\n        )\n\n        ctx.fillStyle = d.color ?? 'black'\n        ctx.fillRect(itemX + symbolX, itemY + symbolY, symbolSize, symbolSize)\n\n        ctx.textAlign = textAlignMapping[labelAnchor]\n\n        if (labelAlignment === 'central') {\n            ctx.textBaseline = 'middle'\n        }\n\n        ctx.fillStyle = itemTextColor ?? theme.legends.text.fill ?? 'black'\n        ctx.fillText(String(d.label), itemX + labelX, itemY + labelY)\n    })\n\n    ctx.restore()\n}\n\nexport const renderContinuousColorLegendToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    {\n        containerWidth,\n        containerHeight,\n        anchor,\n        translateX = 0,\n        translateY = 0,\n        scale,\n        length = continuousColorsLegendDefaults.length,\n        thickness = continuousColorsLegendDefaults.thickness,\n        direction = continuousColorsLegendDefaults.direction,\n        ticks: _ticks,\n        tickPosition = continuousColorsLegendDefaults.tickPosition,\n        tickSize = continuousColorsLegendDefaults.tickSize,\n        tickSpacing = continuousColorsLegendDefaults.tickSpacing,\n        tickOverlap = continuousColorsLegendDefaults.tickOverlap,\n        tickFormat = continuousColorsLegendDefaults.tickFormat,\n        title,\n        titleAlign = continuousColorsLegendDefaults.titleAlign,\n        titleOffset = continuousColorsLegendDefaults.titleOffset,\n        theme,\n    }: AnchoredContinuousColorsLegendProps & {\n        theme: CompleteTheme\n    }\n) => {\n    const {\n        width,\n        height,\n        gradientX1,\n        gradientY1,\n        gradientX2,\n        gradientY2,\n        colorStops,\n        ticks,\n        titleText,\n        titleX,\n        titleY,\n        titleRotation,\n        titleVerticalAlign,\n        titleHorizontalAlign,\n    } = computeContinuousColorsLegend({\n        scale,\n        ticks: _ticks,\n        length,\n        thickness,\n        direction,\n        tickPosition,\n        tickSize,\n        tickSpacing,\n        tickOverlap,\n        tickFormat,\n        title,\n        titleAlign,\n        titleOffset,\n    })\n\n    const { x, y } = computePositionFromAnchor({\n        anchor,\n        translateX,\n        translateY,\n        containerWidth,\n        containerHeight,\n        width,\n        height,\n    })\n\n    const initialStyles = {\n        font: ctx.font,\n        textAlign: ctx.textAlign,\n        textBaseline: ctx.textBaseline,\n    }\n    ctx.save()\n\n    ctx.translate(x, y)\n\n    const gradient = ctx.createLinearGradient(\n        gradientX1 * width,\n        gradientY1 * height,\n        gradientX2 * width,\n        gradientY2 * height\n    )\n    colorStops.forEach(colorStop => {\n        gradient.addColorStop(colorStop.offset, colorStop.stopColor)\n    })\n\n    ctx.fillStyle = gradient\n    ctx.fillRect(0, 0, width, height)\n\n    ctx.font = `${\n        theme.legends.ticks.text.fontWeight ? `${theme.legends.ticks.text.fontWeight} ` : ''\n    }${theme.legends.ticks.text.fontSize}px ${theme.legends.ticks.text.fontFamily}`\n\n    ticks.forEach(tick => {\n        if ((theme.legends.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n            ctx.lineCap = 'square'\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x1, tick.y1)\n            ctx.lineTo(tick.x2, tick.y2)\n            ctx.stroke()\n        }\n\n        if (theme.legends.ticks.text.fill) {\n            ctx.fillStyle = theme.legends.ticks.text.fill\n        }\n        ctx.textAlign = tick.textHorizontalAlign === 'middle' ? 'center' : tick.textHorizontalAlign\n        ctx.textBaseline = tick.textVerticalAlign === 'central' ? 'middle' : tick.textVerticalAlign\n\n        ctx.fillText(tick.text, tick.textX, tick.textY)\n    })\n\n    if (titleText) {\n        ctx.save()\n        ctx.translate(titleX, titleY)\n        ctx.rotate(degreesToRadians(titleRotation))\n\n        ctx.font = `${\n            theme.legends.title.text.fontWeight ? `${theme.legends.title.text.fontWeight} ` : ''\n        }${theme.legends.title.text.fontSize}px ${theme.legends.title.text.fontFamily}`\n        if (theme.legends.title.text.fill) {\n            ctx.fillStyle = theme.legends.title.text.fill\n        }\n        ctx.textAlign = titleHorizontalAlign === 'middle' ? 'center' : titleHorizontalAlign\n        ctx.textBaseline = titleVerticalAlign\n\n        ctx.fillText(titleText, 0, 0)\n\n        ctx.restore()\n    }\n\n    ctx.restore()\n\n    ctx.font = initialStyles.font\n    ctx.textAlign = initialStyles.textAlign\n    ctx.textBaseline = initialStyles.textBaseline\n}\n", "import { useMemo } from 'react'\n\ntype Scale = {\n    (value: number): number\n    invertExtent: (value: number) => [number, number]\n    range: () => number[]\n}\n\nexport const useQuantizeColorScaleLegendData = ({\n    scale,\n    domain: overriddenDomain,\n    reverse = false,\n    valueFormat = v => v,\n    separator = ' - ',\n}: {\n    scale: Scale\n    domain?: number[]\n    reverse?: boolean\n    valueFormat?: <T, U>(value: T) => T | U\n    separator?: string\n}) => {\n    return useMemo(() => {\n        const domain = overriddenDomain ?? scale.range()\n\n        const items = domain.map((domainValue, index) => {\n            const [start, end] = scale.invertExtent(domainValue)\n\n            return {\n                id: domainValue,\n                index,\n                extent: [start, end],\n                label: `${valueFormat(start)}${separator}${valueFormat(end)}`,\n                value: scale(start),\n                color: domainValue,\n            }\n        })\n\n        if (reverse) items.reverse()\n\n        return items\n    }, [overriddenDomain, scale, reverse, separator, valueFormat])\n}\n"],
  "mappings": "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",
  "names": ["SymbolCircle", "_ref", "x", "y", "size", "fill", "_ref$opacity", "opacity", "_ref$borderWidth", "borderWidth", "_ref$borderColor", "borderColor", "_jsx", "r", "cx", "cy", "strokeWidth", "stroke", "style", "pointerEvents", "SymbolDiamond", "transform", "children", "d", "SymbolSquare", "width", "height", "SymbolTriangle", "t", "e", "zeroPadding", "top", "right", "bottom", "left", "computeDimensions", "_ref", "item", "direction", "itemsSpacing", "_padding", "padding", "itemCount", "itemWidth", "itemHeight", "Array", "isArray", "Error", "_extends", "horizontalPadding", "verticalPadding", "width", "height", "spacing", "computePositionFromAnchor", "_ref2", "anchor", "translateX", "translateY", "containerWidth", "containerHeight", "x", "y", "computeItemLayout", "_ref3", "symbolX", "symbolY", "labelX", "labelY", "labelAnchor", "labelAlignment", "justify", "symbolSize", "symbolSpacing", "symbolByShape", "circle", "SymbolCircle", "diamond", "SymbolDiamond", "square", "SymbolSquare", "triangle", "SymbolTriangle", "LegendSvgItem", "_ref", "_style$symbolSize", "_style$itemOpacity", "_style$itemBackground", "_style$symbolSize2", "_ref4", "_data$fill", "_style$symbolBorderWi", "_style$symbolBorderCo", "_ref5", "_ref6", "_style$itemTextColor", "x", "y", "width", "height", "data", "_ref$direction", "direction", "_ref$justify", "justify", "textColor", "_ref$background", "background", "_ref$opacity", "opacity", "_ref$symbolShape", "symbolShape", "_ref$symbolSize", "symbolSize", "_ref$symbolSpacing", "symbolSpacing", "_ref$symbolBorderWidt", "symbolBorderWidth", "_ref$symbolBorderColo", "symbolBorderColor", "onClick", "onMouseEnter", "onMouseLeave", "toggleSerie", "effects", "_useState", "useState", "style", "setStyle", "theme", "useTheme", "handleMouseEnter", "useCallback", "event", "filter", "_ref2", "on", "reduce", "acc", "effect", "_extends", "handleMouseLeave", "_ref3", "_computeItemLayout", "computeItemLayout", "symbolX", "symbolY", "labelX", "labelY", "labelAnchor", "labelAlignment", "isInteractive", "some", "handler", "SymbolShape", "_jsxs", "transform", "itemOpacity", "children", "_jsx", "fill", "itemBackground", "cursor", "id", "createElement", "size", "color", "borderWidth", "borderColor", "hidden", "legends", "symbol", "undefined", "textAnchor", "sanitizeSvgTextStyle", "text", "itemTextColor", "dominantBaseline", "pointerEvents", "userSelect", "label", "LegendSvg", "_ref$padding", "padding", "_padding", "itemWidth", "itemHeight", "_ref$itemDirection", "itemDirection", "_ref$itemsSpacing", "itemsSpacing", "_ref$itemBackground", "_ref$itemOpacity", "computeDimensions", "itemCount", "length", "xStep", "yStep", "map", "i", "left", "top", "BoxLegendSvg", "containerWidth", "containerHeight", "_ref$translateX", "translateX", "_ref$translateY", "translateY", "anchor", "_computeDimensions", "_computePositionFromA", "computePositionFromAnchor", "textAlignMapping", "start", "middle", "end", "renderLegendToCanvas", "ctx", "save", "translate", "font", "fontSize", "fontFamily", "forEach", "d", "_d$color", "itemX", "itemY", "fillStyle", "fillRect", "textAlign", "textBaseline", "fillText", "String", "restore"]
}
